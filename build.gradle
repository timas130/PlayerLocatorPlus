import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.2.20"
	id "org.jetbrains.kotlin.plugin.serialization" version "2.2.20"
    id "com.gradleup.shadow" version "9.2.2"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"player-locator-plus" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

configurations {
	includeAndExpose

	modApi {
		extendsFrom includeAndExpose
	}
	include {
		extendsFrom includeAndExpose
	}
}

dependencies {
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Cloth Config API
	modApi("me.shedaniel.cloth:cloth-config-fabric:16.0.143") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	// Mod Menu
	modApi("com.terraformersmc:modmenu:12.0.0")

    implementation("org.jetbrains.kotlin:kotlin-stdlib:2.2.20")
    implementation("org.jetbrains.kotlinx:kotlinx-datetime-jvm:0.7.1")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm:1.9.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.9.0")

	// Better TOML serializer
	// RANT: So basically Toml4j, the library auto config uses to serialize configs in TOML,
	//       only supports an ancient version of the spec: TOML 0.4.0. This version is so old it
	//       does NOT support hexadecimal numbers, which makes it very hard to specify colors
	//       in the config. So we opt for a better library that actually implements the latest
	//       version of the format.
	implementation("com.akuleshov7:ktoml-core-jvm:0.7.1")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions.jvmTarget = JvmTarget.JVM_21
}
tasks.withType(ShadowJar).configureEach {
    relocate("kotlin", "sh.sit.plp.kotlin_shaded")
    relocate("kotlinx", "sh.sit.plp.kotlin_shadedx")
    relocate("com.akuleshov7.ktoml", "sh.sit.plp.ktoml_shaded")

    archiveClassifier = "dev"
    addMultiReleaseAttribute = false
    minimize()

    from(sourceSets.named("client").map { it.output })
    from("LICENSE")

    dependencies {
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-datetime-jvm"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-serialization-core-jvm"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm"))
        include(dependency("com.akuleshov7:ktoml-core-jvm"))
    }
}
remapJar {
    input = shadowJar.archiveFile.get()
}
remapJar.dependsOn shadowJar

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
